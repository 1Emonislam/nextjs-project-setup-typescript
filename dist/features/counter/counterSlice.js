"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var _a;
Object.defineProperty(exports, "__esModule", { value: true });
exports.incrementIfOdd = exports.selectCount = exports.incrementByAmount = exports.decrement = exports.increment = exports.counterSlice = exports.incrementAsync = void 0;
const toolkit_1 = require("@reduxjs/toolkit");
const counterApi_1 = require("./counterApi");
const initialState = {
    value: 0,
    status: 'idle',
};
// The function below is called a thunk and allows us to perform async logic. It
// can be dispatched like a regular action: `dispatch(incrementAsync(10))`. This
// will call the thunk with the `dispatch` function as the first argument. Async
// code can then be executed and other actions can be dispatched. Thunks are
// typically used to make async requests.
exports.incrementAsync = (0, toolkit_1.createAsyncThunk)('counter/fetchCount', (amount) => __awaiter(void 0, void 0, void 0, function* () {
    const response = yield (0, counterApi_1.fetchCount)(amount);
    // The value we return becomes the `fulfilled` action payload
    return response.data;
}));
exports.counterSlice = (0, toolkit_1.createSlice)({
    name: 'counter',
    initialState,
    // The `reducers` field lets us define reducers and generate associated actions
    reducers: {
        increment: (state) => {
            // Redux Toolkit allows us to write "mutating" logic in reducers. It
            // doesn't actually mutate the state because it uses the Immer library,
            // which detects changes to a "draft state" and produces a brand new
            // immutable state based off those changes
            state.value += 1;
        },
        decrement: (state) => {
            state.value -= 1;
        },
        // Use the PayloadAction type to declare the contents of `action.payload`
        incrementByAmount: (state, action) => {
            state.value += action.payload;
        },
    },
    // The `extraReducers` field lets the slice handle actions defined elsewhere,
    // including actions generated by createAsyncThunk or in other slices.
    extraReducers: (builder) => {
        builder
            .addCase(exports.incrementAsync.pending, (state) => {
            state.status = 'loading';
        })
            .addCase(exports.incrementAsync.fulfilled, (state, action) => {
            state.status = 'idle';
            state.value += action.payload;
        });
    },
});
_a = exports.counterSlice.actions, exports.increment = _a.increment, exports.decrement = _a.decrement, exports.incrementByAmount = _a.incrementByAmount;
// The function below is called a selector and allows us to select a value from
// the state. Selectors can also be defined inline where they're used instead of
// in the slice file. For example: `useSelector((state: RootState) => state.counter.value)`
const selectCount = (state) => state.counter.value;
exports.selectCount = selectCount;
// We can also write thunks by hand, which may contain both sync and async logic.
// Here's an example of conditionally dispatching actions based on current state.
const incrementIfOdd = (amount) => (dispatch, getState) => {
    const currentValue = (0, exports.selectCount)(getState());
    if (currentValue % 2 === 1) {
        dispatch((0, exports.incrementByAmount)(amount));
    }
};
exports.incrementIfOdd = incrementIfOdd;
exports.default = exports.counterSlice.reducer;
//# sourceMappingURL=counterSlice.js.map